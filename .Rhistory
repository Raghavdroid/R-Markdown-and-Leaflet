mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
library(swirl)
install_from_swirl("Regression Models")
libra
library(swirk)
library(swirl)
swirl()
length(levels(InsectSprays$spray))
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
spray2 <- relevel(InsectSprays$spray, 'C')
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, 'C')
fit2 <- lm(InsectSprays$count ~ spray2)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year * Sex, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit,which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno,which=1)
coef(fit) - coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
sigma <- sqrt(sum(resid(fit)^2) / fit$df.residual)
rstd <- resid(fit) / (sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit,which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(swirl)
switch (object,
case = action
)
swirl()
rgp1()
View(swiss)
rgp2()
View(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality , swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3)) / 2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, "binomial", ravenData)
lodds <- predict(mdl,data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
data(mtcars)
data("mtcars")
mtcarsFactors <- mtcars
mtcarsFactors$am <- as.factor(mtcarsFactors$am)
levels(mtcarsFactors$am) <- c("automatic", "manual")
mtcarsFactors$cyl <- as.factor(mtcarsFactors$cyl)
mtcarsFactors$gear <- as.factor(mtcarsFactors$gear)
mtcarsFactors$vs <- as.factor(mtcarsFactors$vs)
levels(mtcarsFactors$vs) <- c("V", "S")
dim(mtcarsFactors)
head(mtcarsFactors)
library(ggplot2)
p <- ggplot(mtcarsFactors, aes(am, mpg))
p + geom_boxplot(aes(fill = am))
head(mtcarsFactors)
cors <- cor(mtcars$mpg, mtcars)
orderedCors <- cors[,order(-abs(cors[1,]))]
orderedCors
amPos <- which(names(orderedCors)=="am")
subsetColumns <- names(orderedCors)[1:amPos]
subsetColumns
mtcarsFactors[,subsetColumns] %>%
ggpairs(
mapping = ggplot2::aes(color = am),
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("smooth", alpha=0.4, size=1), combo = wrap("dot"))
)
ggpairs(
mapping = ggplot2::aes(color = am),
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("smooth", alpha=0.4, size=1), combo = wrap("dot"))
)
mtcarsFactors[,subsetColumns] %>%
ggpairs(
mapping = ggplot2::aes(color = am),
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("smooth", alpha=0.4, size=1), combo = wrap("dot"))
)
mtcarsFactors[,subsetColumns] %>%
ggpairs(
mapping = ggplot2::aes(color = am),
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("smooth", alpha=0.4, size=1), combo = wrap("dot"))
)
mtcarsFactors[,subsetColumns]
ggpairs(
mapping = ggplot2::aes(color = am),
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("smooth", alpha=0.4, size=1), combo = wrap("dot"))
)
ggpairs(
mapping = ggplot2::aes(color = am),
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("smooth", alpha=0.4, size=1), combo = wrap("dot"))
)
cors <- cor(mtcars$mpg, mtcars)
orderedCors <- cors[,order(-abs(cors[1,]))]
orderedCors
##        mpg         wt        cyl       disp         hp       drat         vs         am       carb       gear
##  1.0000000 -0.8676594 -0.8521620 -0.8475514 -0.7761684  0.6811719  0.6640389  0.5998324 -0.5509251  0.4802848
##       qsec
##  0.4186840
amPos <- which(names(orderedCors)=="am")
subsetColumns <- names(orderedCors)[1:amPos]
subsetColumns
## [1] "mpg"  "wt"   "cyl"  "disp" "hp"   "drat" "vs"   "am"
mtcarsFactors[,subsetColumns] %>%
ggpairs(
mapping = ggplot2::aes(color = am),
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("smooth", alpha=0.4, size=1), combo = wrap("dot"))
)
basicFit <- lm(mpg ~ am, mtcarsFactors)
summary(basicFit)
totalFit <- lm(mpg ~ ., mtcarsFactors)
summary(totalFit)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
training.raw <- read.csv("pml-training.csv")
testing.raw <- read.csv("pml-testing.csv")
dim(training.raw)
head(training.raw)
str(training.raw)
summary(training.raw)
maxNAPerc = 20
maxNACount <- nrow(training.raw) / 100 * maxNAPerc
removeColumns <- which(colSums(is.na(training.raw) | training.raw=="") > maxNACount)
training.cleaned01 <- training.raw[,-removeColumns]
testing.cleaned01 <- testing.raw[,-removeColumns]
removeColumns <- grep("timestamp", names(training.cleaned01))
training.cleaned02 <- training.cleaned01[,-c(1, removeColumns )]
testing.cleaned02 <- testing.cleaned01[,-c(1, removeColumns )]
classeLevels <- levels(training.cleaned02$classe)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe, labels=classeLevels)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
training.raw <- read.csv("pml-training.csv")
testing.raw <- read.csv("pml-testing.csv")
dim(training.raw)
head(training.raw)
str(training.raw)
summary(training.raw)
maxNAPerc = 20
maxNACount <- nrow(training.raw) / 100 * maxNAPerc
removeColumns <- which(colSums(is.na(training.raw) | training.raw=="") > maxNACount)
training.cleaned01 <- training.raw[,-removeColumns]
testing.cleaned01 <- testing.raw[,-removeColumns]
removeColumns <- grep("timestamp", names(training.cleaned01))
training.cleaned02 <- training.cleaned01[,-c(1, removeColumns )]
testing.cleaned02 <- testing.cleaned01[,-c(1, removeColumns )]
classeLevels <- levels(training.cleaned02$classe)
training.cleaned03 <- data.frame(data.matrix(training.cleaned02))
training.cleaned03$classe <- factor(training.cleaned03$classe)
testing.cleaned03 <- data.frame(data.matrix(testing.cleaned02))
training.cleaned <- training.cleaned03
testing.cleaned <- testing.cleaned03
set.seed(19791108)
library(caret)
classeIndex <- which(names(training.cleaned) == "classe")
partition <- createDataPartition(y=training.cleaned$classe, p=0.75, list=FALSE)
training.subSetTrain <- training.cleaned[partition, ]
training.subSetTest <- training.cleaned[-partition, ]
correlations <- cor(training.subSetTrain[, -classeIndex], as.numeric(training.subSetTrain$classe))
bestCorrelations <- subset(as.data.frame(as.table(correlations)), abs(Freq)>0.3)
bestCorrelations
library(Rmisc)
library(ggplot2)
p1 <- ggplot(training.subSetTrain, aes(classe,pitch_forearm)) +
geom_boxplot(aes(fill=classe))
p2 <- ggplot(training.subSetTrain, aes(classe, magnet_arm_x)) +
geom_boxplot(aes(fill=classe))
multiplot(p1,p2,cols=2)
library(corrplot)
correlationMatrix <- cor(training.subSetTrain[, -classeIndex])
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.9, exact=TRUE)
excludeColumns <- c(highlyCorrelated, classeIndex)
corrplot(correlationMatrix, method="color", type="lower", order="hclust", tl.cex=0.70, tl.col="black", tl.srt = 45, diag = FALSE)
pcaPreProcess.all <- preProcess(training.subSetTrain[, -classeIndex], method = "pca", thresh = 0.99)
training.subSetTrain.pca.all <- predict(pcaPreProcess.all, training.subSetTrain[, -classeIndex])
training.subSetTest.pca.all <- predict(pcaPreProcess.all, training.subSetTest[, -classeIndex])
testing.pca.all <- predict(pcaPreProcess.all, testing.cleaned[, -classeIndex])
pcaPreProcess.subset <- preProcess(training.subSetTrain[, -excludeColumns], method = "pca", thresh = 0.99)
training.subSetTrain.pca.subset <- predict(pcaPreProcess.subset, training.subSetTrain[, -excludeColumns])
training.subSetTest.pca.subset <- predict(pcaPreProcess.subset, training.subSetTest[, -excludeColumns])
testing.pca.subset <- predict(pcaPreProcess.subset, testing.cleaned[, -classeIndex])
library(randomForest)
ntree <- 200
start <- proc.time()
rfMod.cleaned <- randomForest(
x=training.subSetTrain[, -classeIndex],
y=training.subSetTrain$classe,
xtest=training.subSetTest[, -classeIndex],
ytest=training.subSetTest$classe,
ntree=ntree,
keep.forest=TRUE,
proximity=TRUE)
library(randomForest)
ntree <- 200
start <- proc.time()
rfMod.cleaned <- randomForest(
x=training.subSetTrain[, -classeIndex],
y=training.subSetTrain$classe,
xtest=training.subSetTest[, -classeIndex],
ytest=training.subSetTest$classe,
ntree=ntree,
keep.forest=TRUE,
proximity=TRUE)
library(randomForest)
ntree <- 100
start <- proc.time()
rfMod.cleaned <- randomForest(
x=training.subSetTrain[, -classeIndex],
y=training.subSetTrain$classe,
xtest=training.subSetTest[, -classeIndex],
ytest=training.subSetTest$classe,
ntree=ntree,
keep.forest=TRUE,
proximity=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
train.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
dim(train.raw)
dim(testRaw)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
train.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
dim(train.raw)
dim(test.Raw)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
train.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
dim(train.raw)
dim(test.raw)
sum(complete.cases(trainRaw))
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
train.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
dim(train.raw)
dim(test.raw)
sum(complete.cases(train.raw))
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
trainRaw <- read.csv("pml-training.csv")
testRaw <- read.csv("pml-testing.csv")
dim(trainRaw)
dim(testRaw)
sum(complete.cases(trainRaw))
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
testRaw <- testRaw[, colSums(is.na(testRaw)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
set.seed(22519)
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
install.packages('e1071', dependencies=TRUE)
trainRaw <- read.csv("pml-training.csv")
testRaw <- read.csv("pml-testing.csv")
dim(trainRaw)
dim(testRaw)
sum(complete.cases(trainRaw))
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
testRaw <- testRaw[, colSums(is.na(testRaw)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
set.seed(22519)
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
trainRaw <- read.csv("pml-training.csv")
testRaw <- read.csv("pml-testing.csv")
dim(trainRaw)
dim(testRaw)
sum(complete.cases(trainRaw))
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
testRaw <- testRaw[, colSums(is.na(testRaw)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
set.seed(22519)
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
predictRf <- predict(modelRf, testData)
confusionMatrix(predictRf,testData$classe)
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
predictRf <- predict(modelRf, testData)
accuracy <- postResample(predictRf, testData$classe)
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
accuracy <- postResample(predictRf, testData$classe)
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
result <- predict(modelRf, testCleaned[, -length(names(testCleaned))])
result
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel) # fast plot
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(plyr)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
trainRaw <- read.csv("pml-training.csv")
testRaw <- read.csv("pml-testing.csv")
dim(trainRaw)
dim(testRaw)
sum(complete.cases(trainRaw))
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
testRaw <- testRaw[, colSums(is.na(testRaw)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
set.seed(22519)
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
result <- predict(modelRf, testCleaned[, -length(names(testCleaned))])
result
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel) # fast plot
library(leaflet)
install.packages("leaflet")
setwd("C:/Raghav/RStudio/R Markdown and Leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=43.1594, lng= -79.2469, popup="My Office")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=11.127123, lng= 78.656891, popup="State")
my_map
